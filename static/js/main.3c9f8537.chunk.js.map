{"version":3,"sources":["img/bg.png","components/styles/StyledStage.js","components/styles/StyledCell.js","tetrominos.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/styles/StyledTetris.js","components/Tetris.js","gameHelpers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledStage","styled","div","props","height","width","StyledCell","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","Cell","Stage","stage","length","map","row","cell","idx","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","StyledTetrisWrapper","bgImage","StyledTetris","Tetris","Array","from","fill","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3c9f8537.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${(props) => props.height},\r\n    calc(25vw / ${(props) => props.width})\r\n  );\r\n  grid-template-columns: repeat(${(props) => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n`;\r\n","import styled from 'styled-components';\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${(props) => props.color}, 0.8);\r\n  border: ${(props) => (props.type === 0 ? '0px solid' : '4px solid')};\r\n  border-bottom-color: rgba(${(props) => props.color}, 0.1);\r\n  border-right-color: rgba(${(props) => props.color}, 1);\r\n  border-top-color: rgba(${(props) => props.color}, 1);\r\n  border-left-color: rgba(${(props) => props.color}, 0.3);\r\n`;\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: '0, 0, 0' },\r\n  I: {\r\n    shape: [\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0],\r\n    ],\r\n    color: '80, 227, 230',\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, 'J', 0],\r\n      [0, 'J', 0],\r\n      ['J', 'J', 0],\r\n    ],\r\n    color: '36, 95, 223',\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, 'L', 0],\r\n      [0, 'L', 0],\r\n      [0, 'L', 'L'],\r\n    ],\r\n    color: '223, 173, 36',\r\n  },\r\n  O: {\r\n    shape: [\r\n      ['O', 'O'],\r\n      ['O', 'O'],\r\n    ],\r\n    color: '223, 217, 36',\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, 'S', 'S'],\r\n      ['S', 'S', 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: '48, 211, 56',\r\n  },\r\n  T: {\r\n    shape: [\r\n      [0, 0, 0],\r\n      ['T', 'T', 'T'],\r\n      [0, 'T', 0],\r\n    ],\r\n    color: '132, 61, 198',\r\n  },\r\n  Z: {\r\n    shape: [\r\n      ['Z', 'Z', 0],\r\n      [0, 'Z', 'Z'],\r\n      [0, 0, 0],\r\n    ],\r\n    color: '227, 78, 78',\r\n  },\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = 'IJLOSTZ';\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino];\r\n};\r\n","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\nconst Cell = ({ type }) => {\r\n  return <StyledCell type={type} color={TETROMINOS[type].color} />;\r\n};\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport { StyledStage } from './styles/StyledStage';\r\nimport Cell from './Cell';\r\nconst Stage = ({ stage }) => {\r\n  return (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n      {stage.map((row) =>\r\n        row.map((cell, idx) => <Cell key={idx} type={cell[0]} />)\r\n      )}\r\n    </StyledStage>\r\n  );\r\n};\r\n\r\nexport default Stage;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${(props) => (props.gameOver ? 'red' : '#999')};\r\n  background: #000;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n`;\r\n","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\nconst Display = ({ gameOver, text }) => {\r\n  return <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>;\r\n};\r\n\r\nexport default Display;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: white;\r\n  background: #333;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n","import React from 'react';\r\nimport { StyledStartButton } from './styles/StyledStartButton';\r\nconst StartButton = ({ callback }) => {\r\n  return <StyledStartButton onClick={callback}>Start Game</StyledStartButton>;\r\n};\r\n\r\nexport default StartButton;\r\n","import styled from 'styled-components';\r\n\r\nimport bgImage from '../../img/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n// components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\nconst Tetris = () => {\r\n  return (\r\n    <StyledTetrisWrapper>\r\n      <StyledTetris>\r\n        <Stage stage={createStage()} />\r\n        <aside>\r\n          <div>\r\n            <Display text='Score' />\r\n            <Display text='Rows' />\r\n            <Display text='Level' />\r\n          </div>\r\n          <StartButton />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, 'clear'])\r\n  );\r\n","import React from 'react';\r\nimport Tetris from './components/Tetris';\r\n\r\nconst App = () => (\r\n  <div className='App'>\r\n    <Tetris />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}